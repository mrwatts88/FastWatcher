// Fast Watcher - Search Interface

// Color palette
global Colors {
    out property <color> bg: #e0e1dd;
    out property <color> text: #1d1a05;
    out property <color> accent-1: #778da9;
    out property <color> accent-2: #17255a;
    out property <color> danger: #b9314f;
    out property <color> white: #ffffff;
    out property <color> border: #c0c1bd;
}

// Entity structs for data
export struct SightingItem {
    id: int,
    common-name: string,
    date: string,
    location: string,
}

export struct TaxonItem {
    id: int,
    rank: string,
    common-name: string,
    taxonomy: string,
}

export struct TripItem {
    id: int,
    name: string,
    date: string,
    location: string,
}

// Detail structs
export struct SightingDetail {
    id: int,
    common-name: string,
    taxonomy: string,
    date: string,
    location: string,
    notes: string,
    media-path: string,
    taxon-id: int,
    trip-id: int,
    has-trip: bool,
}

export struct TaxonDetail {
    id: int,
    rank: string,
    common-name: string,
    kingdom: string,
    phylum: string,
    class: string,
    order: string,
    family: string,
    subfamily: string,
    genus: string,
    species-epithet: string,
}

export struct TripDetail {
    id: int,
    name: string,
    date: string,
    location: string,
    notes: string,
}

// Related entity item structs
export struct RelatedSightingItem {
    id: int,
    common-name: string,
    date: string,
}

export struct RelatedTaxonItem {
    id: int,
    common-name: string,
    rank: string,
    taxonomy: string,
}

export struct RelatedTripItem {
    id: int,
    name: string,
    date: string,
}

// Sighting card component
component SightingCard inherits Rectangle {
    in property <SightingItem> item;
    callback clicked();

    height: 70px;
    background: Colors.white;
    border-radius: 6px;
    border-width: 1px;
    border-color: Colors.border;

    states [
        hover when touch.has-hover: {
            background: #f5f5f5;
        }
    ]

    touch := TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        padding: 12px;
        spacing: 8px;

        VerticalLayout {
            spacing: 4px;

            Text {
                text: item.common-name;
                font-size: 15px;
                font-weight: 600;
                color: Colors.text;
            }

            if item.date != "" || item.location != "": Text {
                text: (item.date != "" ? item.date : "") + (item.date != "" && item.location != "" ? " • " : "") + (item.location != "" ? item.location : "");
                font-size: 12px;
                color: Colors.accent-1;
            }
        }
    }
}

// Taxon card component
component TaxonCard inherits Rectangle {
    in property <TaxonItem> item;
    callback clicked();

    height: 70px;
    background: Colors.white;
    border-radius: 6px;
    border-width: 1px;
    border-color: Colors.border;

    states [
        hover when touch.has-hover: {
            background: #f5f5f5;
        }
    ]

    touch := TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        padding: 12px;
        spacing: 8px;

        VerticalLayout {
            spacing: 4px;

            HorizontalLayout {
                spacing: 8px;

                Text {
                    text: item.common-name;
                    font-size: 15px;
                    font-weight: 600;
                    color: Colors.text;
                }

                Rectangle {
                    width: 50px;
                    height: 18px;
                    background: Colors.accent-1;
                    border-radius: 3px;

                    Text {
                        text: item.rank;
                        font-size: 10px;
                        font-weight: 600;
                        color: Colors.white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }
            }

            Text {
                text: item.taxonomy;
                font-size: 12px;
                color: Colors.accent-1;
            }
        }
    }
}

// Trip card component
component TripCard inherits Rectangle {
    in property <TripItem> item;
    callback clicked();

    height: 70px;
    background: Colors.white;
    border-radius: 6px;
    border-width: 1px;
    border-color: Colors.border;

    states [
        hover when touch.has-hover: {
            background: #f5f5f5;
        }
    ]

    touch := TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        padding: 12px;
        spacing: 8px;

        VerticalLayout {
            spacing: 4px;

            Text {
                text: item.name;
                font-size: 15px;
                font-weight: 600;
                color: Colors.text;
            }

            if item.date != "" || item.location != "": Text {
                text: (item.date != "" ? item.date : "") + (item.date != "" && item.location != "" ? " • " : "") + (item.location != "" ? item.location : "");
                font-size: 12px;
                color: Colors.accent-1;
            }
        }
    }
}

// Back button component (reusable)
component BackButton inherits Rectangle {
    callback clicked();

    height: 40px;
    width: 100px;
    background: transparent;

    TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        spacing: 8px;

        Text {
            text: "←";
            font-size: 20px;
            color: Colors.accent-2;
        }

        Text {
            text: "Back";
            font-size: 16px;
            color: Colors.accent-2;
            vertical-alignment: center;
        }
    }
}

// Field display component
component FieldRow inherits VerticalLayout {
    in property <string> label;
    in property <string> value;

    spacing: 4px;

    Text {
        text: label;
        font-size: 11px;
        font-weight: 600;
        color: Colors.accent-1;
    }

    Text {
        text: value;
        font-size: 15px;
        color: Colors.text;
    }
}

// Related item card component
component RelatedCard inherits Rectangle {
    in property <string> title;
    in property <string> subtitle;
    callback clicked();

    height: 50px;
    background: Colors.white;
    border-radius: 4px;
    border-width: 1px;
    border-color: Colors.border;

    states [
        hover when touch.has-hover: {
            background: #f5f5f5;
        }
    ]

    touch := TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        padding: 12px;
        spacing: 8px;

        VerticalLayout {
            spacing: 2px;

            Text {
                text: title;
                font-size: 14px;
                font-weight: 600;
                color: Colors.text;
            }

            if subtitle != "": Text {
                text: subtitle;
                font-size: 12px;
                color: Colors.accent-1;
            }
        }
    }
}

// Related taxon card component (with rank pill and taxonomy)
component RelatedTaxonCard inherits Rectangle {
    in property <RelatedTaxonItem> taxon;
    callback clicked();

    height: 60px;
    background: Colors.white;
    border-radius: 4px;
    border-width: 1px;
    border-color: Colors.border;

    states [
        hover when touch.has-hover: {
            background: #f5f5f5;
        }
    ]

    touch := TouchArea {
        clicked => { root.clicked(); }
    }

    HorizontalLayout {
        padding: 12px;
        spacing: 8px;

        VerticalLayout {
            spacing: 4px;

            HorizontalLayout {
                spacing: 8px;

                Text {
                    text: taxon.common-name;
                    font-size: 14px;
                    font-weight: 600;
                    color: Colors.text;
                }

                Rectangle {
                    width: 50px;
                    height: 18px;
                    background: Colors.accent-1;
                    border-radius: 3px;

                    Text {
                        text: taxon.rank;
                        font-size: 10px;
                        font-weight: 600;
                        color: Colors.white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                    }
                }
            }

            Text {
                text: taxon.taxonomy;
                font-size: 11px;
                color: Colors.accent-1;
            }
        }
    }
}

// Sighting Detail View
component SightingDetailView inherits Rectangle {
    in property <SightingDetail> sighting;
    in property <[RelatedTaxonItem]> related-taxa;
    in property <[RelatedTripItem]> related-trips;
    callback back();
    callback view-taxon(int);
    callback view-trip(int);

    background: Colors.bg;

    Flickable {
        VerticalLayout {
            alignment: start;
            padding: 20px;
            spacing: 20px;

            BackButton {
                clicked => { root.back(); }
            }

            // Header
            VerticalLayout {
                spacing: 8px;

                Text {
                    text: "SIGHTING";
                    font-size: 11px;
                    font-weight: 700;
                    color: Colors.accent-2;
                    letter-spacing: 1px;
                }

                Text {
                    text: sighting.common-name;
                    font-size: 32px;
                    font-weight: 700;
                    color: Colors.text;
                }

                Text {
                    text: sighting.taxonomy;
                    font-size: 14px;
                    color: Colors.accent-1;
                }
            }

            // Info section
            Rectangle {
                background: Colors.white;
                border-radius: 8px;

                VerticalLayout {
                    alignment: start;
                    padding: 16px;
                    spacing: 16px;

                    if sighting.date != "": FieldRow {
                        label: "DATE";
                        value: sighting.date;
                    }

                    if sighting.location != "": FieldRow {
                        label: "LOCATION";
                        value: sighting.location;
                    }

                    if sighting.notes != "": FieldRow {
                        label: "NOTES";
                        value: sighting.notes;
                    }

                    if sighting.media-path != "": FieldRow {
                        label: "MEDIA";
                        value: sighting.media-path;
                    }
                }
            }

            // Related Taxon
            if related-taxa.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Taxon";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for taxon in related-taxa: RelatedTaxonCard {
                    taxon: taxon;
                    clicked => { root.view-taxon(taxon.id); }
                }
            }

            // Related Trip
            if sighting.has-trip && related-trips.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Trip";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for trip in related-trips: RelatedCard {
                    title: trip.name;
                    subtitle: trip.date;
                    clicked => { root.view-trip(trip.id); }
                }
            }
        }
    }
}

// Taxon Detail View
component TaxonDetailView inherits Rectangle {
    in property <TaxonDetail> taxon;
    in property <[RelatedSightingItem]> related-sightings;
    in property <[RelatedTripItem]> related-trips;
    callback back();
    callback view-sighting(int);
    callback view-trip(int);

    background: Colors.bg;

    Flickable {
        VerticalLayout {
            alignment: start;
            padding: 20px;
            spacing: 20px;

            BackButton {
                clicked => { root.back(); }
            }

            // Header
            VerticalLayout {
                spacing: 8px;

                Text {
                    text: "TAXON";
                    font-size: 11px;
                    font-weight: 700;
                    color: Colors.accent-2;
                    letter-spacing: 1px;
                }

                HorizontalLayout {
                    spacing: 12px;

                    Text {
                        text: taxon.common-name;
                        font-size: 32px;
                        font-weight: 700;
                        color: Colors.text;
                    }

                    Rectangle {
                        width: 70px;
                        height: 28px;
                        background: Colors.accent-1;
                        border-radius: 4px;

                        Text {
                            text: taxon.rank;
                            font-size: 12px;
                            font-weight: 600;
                            color: Colors.white;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }
                    }
                }
            }

            // Taxonomy section
            Rectangle {
                background: Colors.white;
                border-radius: 8px;

                VerticalLayout {
                    alignment: start;
                    padding: 16px;
                    spacing: 12px;

                    Text {
                        text: "Taxonomy";
                        font-size: 14px;
                        font-weight: 600;
                        color: Colors.text;
                    }

                    FieldRow {
                        label: "KINGDOM";
                        value: taxon.kingdom;
                    }

                    if taxon.phylum != "": FieldRow {
                        label: "PHYLUM";
                        value: taxon.phylum;
                    }

                    if taxon.class != "": FieldRow {
                        label: "CLASS";
                        value: taxon.class;
                    }

                    if taxon.order != "": FieldRow {
                        label: "ORDER";
                        value: taxon.order;
                    }

                    if taxon.family != "": FieldRow {
                        label: "FAMILY";
                        value: taxon.family;
                    }

                    if taxon.subfamily != "": FieldRow {
                        label: "SUBFAMILY";
                        value: taxon.subfamily;
                    }

                    if taxon.genus != "": FieldRow {
                        label: "GENUS";
                        value: taxon.genus;
                    }

                    if taxon.species-epithet != "": FieldRow {
                        label: "SPECIES";
                        value: taxon.species-epithet;
                    }
                }
            }

            // Sightings section
            if related-sightings.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Sightings (" + related-sightings.length + ")";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for sighting in related-sightings: RelatedCard {
                    title: sighting.common-name;
                    subtitle: sighting.date;
                    clicked => { root.view-sighting(sighting.id); }
                }
            }

            // Trips section
            if related-trips.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Trips (" + related-trips.length + ")";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for trip in related-trips: RelatedCard {
                    title: trip.name;
                    subtitle: trip.date;
                    clicked => { root.view-trip(trip.id); }
                }
            }
        }
    }
}

// Trip Detail View
component TripDetailView inherits Rectangle {
    in property <TripDetail> trip;
    in property <[RelatedSightingItem]> related-sightings;
    in property <[RelatedTaxonItem]> related-taxa;
    callback back();
    callback view-sighting(int);
    callback view-taxon(int);

    background: Colors.bg;

    Flickable {
        VerticalLayout {
            alignment: start;
            padding: 20px;
            spacing: 20px;

            BackButton {
                clicked => { root.back(); }
            }

            // Header
            VerticalLayout {
                spacing: 8px;

                Text {
                    text: "TRIP";
                    font-size: 11px;
                    font-weight: 700;
                    color: Colors.accent-2;
                    letter-spacing: 1px;
                }

                Text {
                    text: trip.name;
                    font-size: 32px;
                    font-weight: 700;
                    color: Colors.text;
                }
            }

            // Info section
            Rectangle {
                background: Colors.white;
                border-radius: 8px;

                VerticalLayout {
                    alignment: start;
                    padding: 16px;
                    spacing: 16px;

                    if trip.date != "": FieldRow {
                        label: "DATE";
                        value: trip.date;
                    }

                    if trip.location != "": FieldRow {
                        label: "LOCATION";
                        value: trip.location;
                    }

                    if trip.notes != "": FieldRow {
                        label: "NOTES";
                        value: trip.notes;
                    }
                }
            }

            // Taxa section
            if related-taxa.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Taxa (" + related-taxa.length + ")";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for taxon in related-taxa: RelatedTaxonCard {
                    taxon: taxon;
                    clicked => { root.view-taxon(taxon.id); }
                }
            }

            // Sightings section
            if related-sightings.length > 0: VerticalLayout {
                spacing: 8px;

                Text {
                    text: "Sightings (" + related-sightings.length + ")";
                    font-size: 16px;
                    font-weight: 600;
                    color: Colors.text;
                }

                for sighting in related-sightings: RelatedCard {
                    title: sighting.common-name;
                    subtitle: sighting.date;
                    clicked => { root.view-sighting(sighting.id); }
                }
            }
        }
    }
}

// Main app window
export component AppWindow inherits Window {
    // View state
    in-out property <string> current-view: "search";
    in-out property <int> detail-entity-id: 0;

    // Search properties
    in-out property <string> search-text;
    in property <bool> is-searching: search-text.character-count >= 3;

    // Model properties for results
    in-out property <[SightingItem]> sightings-model;
    in-out property <[TaxonItem]> taxa-model;
    in-out property <[TripItem]> trips-model;

    // Detail view properties
    in-out property <SightingDetail> current-sighting;
    in-out property <TaxonDetail> current-taxon;
    in-out property <TripDetail> current-trip;

    // Related entity lists
    in-out property <[RelatedSightingItem]> related-sightings;
    in-out property <[RelatedTaxonItem]> related-taxa;
    in-out property <[RelatedTripItem]> related-trips;

    // Callbacks
    callback search-changed(string);
    callback view-sighting-detail(int);
    callback view-taxon-detail(int);
    callback view-trip-detail(int);
    callback back-to-search();
    callback view-related-sighting(int);
    callback view-related-taxon(int);
    callback view-related-trip(int);

    title: "Fast Watcher";
    background: Colors.bg;
    min-width: 800px;
    min-height: 600px;

    // Search view
    if current-view == "search": VerticalLayout {
        alignment: start;
        padding: 20px;
        spacing: 16px;

        // Search input container
        Rectangle {
            height: 50px;
            background: Colors.white;
            border-radius: 8px;
            border-width: 2px;
            border-color: Colors.border;

            HorizontalLayout {
                padding-left: 16px;
                padding-right: 16px;

                TextInput {
                    text <=> root.search-text;
                    font-size: 16px;
                    color: Colors.text;
                    vertical-alignment: center;

                    edited() => {
                        root.search-changed(self.text);
                    }
                }
            }
        }

        // Results area
        if root.is-searching: Flickable {
            viewport-height: content-layout.preferred-height;

            content-layout := VerticalLayout {
                spacing: 24px;

                // Sightings section
                if root.sightings-model.length > 0: VerticalLayout {
                    spacing: 8px;

                    Text {
                        text: "Sightings (" + root.sightings-model.length + ")";
                        font-size: 14px;
                        font-weight: 600;
                        color: Colors.text;
                    }

                    Rectangle {
                        height: 1px;
                        background: Colors.accent-1;
                    }

                    for item in root.sightings-model: SightingCard {
                        item: item;
                        clicked => {
                            root.view-sighting-detail(item.id);
                        }
                    }
                }

                // Taxa section
                if root.taxa-model.length > 0: VerticalLayout {
                    spacing: 8px;

                    Text {
                        text: "Taxa (" + root.taxa-model.length + ")";
                        font-size: 14px;
                        font-weight: 600;
                        color: Colors.text;
                    }

                    Rectangle {
                        height: 1px;
                        background: Colors.accent-1;
                    }

                    for item in root.taxa-model: TaxonCard {
                        item: item;
                        clicked => {
                            root.view-taxon-detail(item.id);
                        }
                    }
                }

                // Trips section
                if root.trips-model.length > 0: VerticalLayout {
                    spacing: 8px;

                    Text {
                        text: "Trips (" + root.trips-model.length + ")";
                        font-size: 14px;
                        font-weight: 600;
                        color: Colors.text;
                    }

                    Rectangle {
                        height: 1px;
                        background: Colors.accent-1;
                    }

                    for item in root.trips-model: TripCard {
                        item: item;
                        clicked => {
                            root.view-trip-detail(item.id);
                        }
                    }
                }

                // Empty state
                if root.sightings-model.length == 0 && root.taxa-model.length == 0 && root.trips-model.length == 0: VerticalLayout {
                    alignment: center;
                    min-height: 200px;

                    Text {
                        text: "No results found";
                        font-size: 14px;
                        color: Colors.accent-1;
                        horizontal-alignment: center;
                    }
                }
            }
        }

        // Welcome message
        if !root.is-searching: VerticalLayout {
            alignment: center;

            Text {
                text: "Type at least 3 characters to search";
                font-size: 14px;
                color: Colors.accent-1;
                horizontal-alignment: center;
            }
        }
    }

    // Detail views
    if current-view == "sighting-detail": SightingDetailView {
        sighting: root.current-sighting;
        related-taxa: root.related-taxa;
        related-trips: root.related-trips;
        back => { root.back-to-search(); }
        view-taxon(id) => { root.view-related-taxon(id); }
        view-trip(id) => { root.view-related-trip(id); }
    }

    if current-view == "taxon-detail": TaxonDetailView {
        taxon: root.current-taxon;
        related-sightings: root.related-sightings;
        related-trips: root.related-trips;
        back => { root.back-to-search(); }
        view-sighting(id) => { root.view-related-sighting(id); }
        view-trip(id) => { root.view-related-trip(id); }
    }

    if current-view == "trip-detail": TripDetailView {
        trip: root.current-trip;
        related-sightings: root.related-sightings;
        related-taxa: root.related-taxa;
        back => { root.back-to-search(); }
        view-sighting(id) => { root.view-related-sighting(id); }
        view-taxon(id) => { root.view-related-taxon(id); }
    }
}
